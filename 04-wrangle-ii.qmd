---
title: "II: Appending, joining, & reshaping data"
image: apple-touch-icon.png
execute: 
  message: false
  warning: false
---

:::{.panel-tabset}

# Lesson

[{{< fa code >}} R Code](/r-scripts/04-wrangle-ii.R)

- So far, we have only worked with single data files: we read in a file, wrangled our data, and, sometimes, outputted a new file.
- But very often, a key aspect of the data wrangling workflow is to combine more than one data set together. This may include;
  - **appending** new rows to an existing data frame in memory
  - **joining** two data sets together using a common key value found in both.
- As part of this, we often will need to;
  - **reshape** our data, pivoting from wide to long form (or vice versa). 
- We'll go through each individually below.

## Data

- The data for today's lesson is all in your `data/sch-test` folder
  - It should look something like this:

```
|__ data/
    |-- ...
    |__ sch_test/
        |-- all_schools.csv
        |-- all_schools_wide.csv
        |__ by_school/
            |-- bend_gate_1980.csv
            |-- bend_gate_1981.csv
            |...
            |-- spottsville_1985.csv
```

- These fake data represent test scores across three subjects --- math,
reading, and science --- across four schools over six years.
- Each school has a file for each year in the `by_school` subdirectory.
- The two files in `sch_test` directory, `all_schools.csv` and
`all_schools_wide.csv`, combine the individual files but in different
formats.
  - We'll use these data sets to practice appending, joining, and reshaping.

## Setup

As always, we begin by reading in the tidyverse library.

```{r, include = FALSE, purl = TRUE}
################################################################################
##
## <PROJ> EDH7916: Data wrangling II: Appending, joining, and reshaping data
## <FILE> dw_two.R 
## <INIT> 31 January 2020
## <AUTH> Benjamin Skinner (GitHub/Twitter: @btskinner)
##
################################################################################

```

```{r}
## ---------------------------
## libraries
## ---------------------------

library(tidyverse)
```

- As we did in the past lesson, we will run this script assuming that
our working directory is set to the project folder

## Appending data

- Our first task is the most straightforward. When appending data, we simply add similarly structured rows to an exiting data frame.
- What do I mean by similarly structured? Imagine you have a data frame that
looks like this:

| id | year | score |
|:--:|:----:|:-----:|
| A  | 2020 | 98    |
| B  | 2020 | 95    |
| C  | 2020 | 85    |
| D  | 2020 | 94    |

- Now, assume you are given data that look like this:

| id | year | score |
|:--:|:----:|:-----:|
| E  | 2020 | 99    |
| F  | 2020 | 90    |

- These data are similarly structured: _same column names in the same order_. If we know that the data came from the same process (_e.g._, **id**s represent students in the same classroom with each file representing a different test day), then we can safely append the second to the first:

| id  | year   | score |
|:---:|:------:|:-----:|
| A   | 2020   | 98    |
| B   | 2020   | 95    |
| C   | 2020   | 85    |
| D   | 2020   | 94    |
| _E_ | _2020_ | _99_  |
| _F_ | _2020_ | _90_  |

- Data that are the result of the _exact_ same data collecting process across locations or time may be appended. In education research, administrative data are often recorded each term or year, meaning you can build a panel data set by appending. The NCES IPEDS data files *generally* work like this
  - Note on IPEDS: Some of the variables have changed over time, one of the most notable being enrollment data between 2001 and 2002, so always check your dictionary!

- However, it's incumbent upon you as the researcher to understand your data. Just because you are able to append (R will try to make it work for you) doesn't mean you always should.
  - What if the `score` column in our data weren't on the same scale? 
  - What if the test date mattered but isn't included in the file?
  - What if the files actually represent scores from different grades or schools?
- It's possible that we can account for each of these issues as we clean our data, but it won't happen automatically --- append with care!

<!-- > #### Quick exercise  -->
<!-- > While appending data can be straightforward, it can also be -->
<!-- > _dangerous_. What do you think I mean by that? Think of some -->
<!-- > situations in which appending data frames may not be a good idea. -->

```{r, purl = TRUE, include = FALSE}
## -----------------------------------------------------------------------------
## Append data
## -----------------------------------------------------------------------------
```

### Example

Let's practice with an example. First, we'll read in three data files
from the `by_school` directory.

```{r}
## ---------------------------
## input
## ---------------------------

## read in data, storing in df_*, where * is a unique number
df_1 <- read_csv(file.path("data", "sch-test", "by-school", "bend-gate-1980.csv"))
df_2 <- read_csv(file.path("data", "sch-test", "by-school", "bend-gate-1981.csv"))
df_3 <- read_csv(file.path("data", "sch-test", "by-school", "bend-gate-1982.csv"))
```

- Looking at each, we can see that they are similarly structured, with the following columns in the same order: `school`, `year`, `math`, `read`, `science`:

```{r}
## ---------------------------
## process
## ---------------------------

## show each
df_1
df_2
df_3
```

From the dplyr library, we use the [`bind_rows()`](https://dplyr.tidyverse.org/reference/bind.html) function to append the second and third data frames to the first.

```{r}
## append files
df <- bind_rows(df_1, df_2, df_3)

## show
df
```

- That's it!

> #### Quick exercise
> Read in the rest of the files for Bend Gate and append them to the
> current data frame.

> #### Quick exercise: Take Two
> If `bind_rows()` stacks tables on top of each other, what do you think would stack them side-by-side? Copy the below code and try to figure how to get them back together

```{r}

df_split_left <- df[,1:2]
df_split_right <- df[,3:5]

print(df_split_left)
print(df_split_right)

## Append them back together side-by-side

```

## Joining data

- More often than appending your data files, however, you will need to merge or join them.
- With a join, you add to your data frame new columns (new variables) that come from a second data frame.
- The key difference between joining and appending is that a join requires a _key_, that is, a variable or index common to each data frame that uniquely identifies observations.
  - It's this key that's used to line everything up.

For example, say you have these two data sets,

| id | sch | year | score |
|:--:|:---:|------|:-----:|
| A  | 1   | 2020 | 98    |
| B  | 1   | 2020 | 95    |
| C  | 2   | 2020 | 85    |
| D  | 3   | 2020 | 94    |

| sch | type       |
|:---:|:----------:|
| 1   | elementary |
| 2   | middle     |
| 3   | high       |

- You want to add the school `type` to the first data set.
- You can do this because you have a common _key_ between each set: `sch`.

1. Add a column to the first data frame called `type`
2. Fill in each row of the new column with the `type` value that
   corresponds to the matching `sch` value in both data frames:
   - `sch == 1 --> elementary`
   - `sch == 2 --> middle`
   - `sch == 3 --> high`

The end result would then look like this:

| id | sch | year | score | type       |
|:--:|:---:|------|:-----:|:-----------|
| A  | 1   | 2020 | 98    | elementary |
| B  | 1   | 2020 | 95    | elementary |
| C  | 2   | 2020 | 85    | middle     |
| D  | 3   | 2020 | 94    | high       |

### Example

```{r, purl = TRUE, include = FALSE}
## -----------------------------------------------------------------------------
## Join data
## -----------------------------------------------------------------------------
```

- A common join task in education research involves adding group-level
aggregate statistics to individual observations, for example;
  - adding school-level average test scores to each student's row.
  - With a panel data set (observations across time), we might want within-year
averages added to each unit-by-time period row.
- Let's do the second, adding within-year across school average test scores to each school-by-year observation.

```{r}
## ---------------------------
## input
## ---------------------------

## read in all_schools data
df <- read_csv(file.path("data", "sch-test", "all-schools.csv"))
```

- Looking at the data, we see that it's similar to what we've seen above, with additional schools.

```{r}
## show
df
```

Our task is two-fold:

1. Get the average of each test score (math, reading, science) across
   all schools within each year and save the summary data frame in an
   object.
2. Join the new summary data frame to the original data frame.

#### 1. Get summary

```{r}
## ---------------------------
## process
## ---------------------------

## get test score summary 
df_sum <- df |>
    ## grouping by year so average within each year
    group_by(year) |>
    ## get mean(<score>) for each test
    summarize(math_m = mean(math),
              read_m = mean(read),
              science_m = mean(science))

## show
df_sum
```

> #### Quick exercise
> Thinking ahead, why do you think we created new names for the
> summarized columns? Why the `_m` ending?

#### 2. Join

- While one can [`merge` using base R](https://stat.ethz.ch/R-manual/R-devel/library/base/html/merge.html), dplyr uses the [SQL language of joins](https://en.wikipedia.org/wiki/Join_(SQL)),   
  - This can be conceptually clearer (particularly for those who already have experience with relational database structures).
  - We will learn more about SQL in [Data Wrangling IV](09-wrangle-iv.qmd)
- Here are the most common joins you will use:

- `left_join(x, y)`: keep all x, drop unmatched y
- `right_join(x, y)`: keep all y, drop unmatched x
- `inner_join(x, y)`: keep only matching
- `full_join(x, y)`: keep everything
- `anti_join(x, y)`: keep only obs in x and that are not in y (more useful than you'd think)

- For example, the result of a **left join** between data frame _X_ and data frame _Y_ will include all observations in _X_ and those in _Y_ that are also in _X_.  

**X**

| id  | col\_A | col\_B |
|:---:|:------:|:------:|
| 001 | a      | 1      |
| 002 | b      | 2      |
| 003 | a      | 3      |

**Y**

| id  | col\_C | col\_D |
|:---:|:------:|:------:|
| 001 | T      | 9      |
| 002 | T      | 9      |
| 004 | F      | 9      |

**XY** (result of left join)

| id  | col\_A | col\_B | col\_C | col\_D |
|:---:|:-------|:------:|:------:|:------:|
| 001 | a      | 1      | T      | 9      |
| 002 | b      | 2      | T      | 9      |
| 003 | a      | 3      | NA     | NA     |

- Observations in both _X_ and _Y_ (`001` and `002`, above), will have data for the columns that were separately in _X_ and _Y_ before.
- Those in _X_ only (`003`), will have missing values in the new columns that
came from _Y_ because they didn't exist there.
- Observations in _Y_ but not _X_ (`004`) are dropped entirely.

Back to our example...

- Since we want to join a smaller aggregated data frame, `df_sum`, to the original data frame, `df`, we'll use a `left_join()`.
  - The join functions will try to guess the joining variable (and tell you what it picked) if you don't supply one, but we'll specify one to be clear.

```{r}
## start with data frame...
df_joined <- df |>
    ## pipe into left_join to join with df_sum using "year" as key
    left_join(df_sum, by = "year")

## show
df_joined
```

> #### Quick exercise
> Look at the first 10 rows of `df_joined`. What do you notice about
> the new summary columns we added?

### Matt's Re-Explanation of Joining (Updated Feb 1 2024)

- Following a productive conversation in my office hours, I wanted to re-explain joining in a way I think is a little clearer than explanation above. Hopefully this helps some of you!
- All `_join()` functions takes three main "arguments" and they have always the same meaning
  - `x` data one, a.k.a. the "left" data
  - `y` data two, a.k.a. the "right" data
  - `by` the variables to use as a "key"

#### "left" and "right" just mean `x` and `y`
- The `left` in `left_join()` simply means "start with `x` data and join `y` data into it"
  - It doesn't have anything to do with being physically on the left
- If it helps, think of `left_join()` as the `x` join

```{r}
## We can be overly specific to make the point
left_join(x = df,
          y = df_sum,
          by = "year")
```

##### Using the `|>` pipe
- Now, if you remember from [Data Wrangling I](03-wrangle-i.qmd), the `|>` makes R code more intuitive by "piping" one thing into the next
  - This makes things simpler 99% of the time (no one wants to be writing nested code)
  - But in this case it takes a second to get your head around
- By default, the pipe `|>` will always go into the first "argument" of a function, which in this case, is `x`
  - We can always specify where it should go with an `_` underscore

```{r}
## Therefore 
left_join(x = df,
          y = df_sum,
          by = "year")

## Is exactly the same as
df |>
  left_join(x = _, ## If it helps to visualize, the _ is where the |> will go
            y = df_sum,
            by = "year")

## Is exactly the same as
df |>
  left_join(df_sum,
            by = "year")
```

- You can write joins whichever way you want (piped or not-piped)
  - Eventually, you will find piped is easier and more-efficient, but focus on whichever way makes more sense to you for now

```{r}
## Note: if we want to keep the joined data, we should assign it to df_join
df_join <- df |>
  left_join(df_sum,
            by = "year")

```

#### `by`

- Whichever type of `_join` you are doing, the `by` argument is just how `x` and `y` are being matched up
  - `by` has to be at least one variable that is in both `x` and `y` and identifies the same observation
    - e.g., `by = "school_id"`
    - Most often this will be some kind of identifying variable (student ID, school ID, city, state, region, etc.)
  - If have more than one piece of information to match on, such as school and year, we can specify that with `c()`
    - e.g., `by = c("school_id", "year")`
    - This will then find information for each school in each year, and join it in correctly
- If you don't provide any `by` arguments, `R` will try to be smart and look for columns names that are the same in both data sets
  - This can lead to incorrect joins though, so always best to specify
- Lastly, if you need to join by columns that have different names in each data set use `c("name in df_1" = "name in df_2")`
  - e.g., `by = c("student_id" = "id_number")`

#### `_join` summary

- Joining data is one of the most important tasks in educational research
  - [IPEDS Complete Data Files](https://nces.ed.gov/ipeds/datacenter/DataFiles) are the perfect example, within each year all the data is stored in separate files that need joining
    - Remember the same IPEDS files for different years need `bind_rows()` once you add a year identifier
- It takes a while to get your head around, but if you can do it properly, you are well on the way to mastering data wrangling!


## Reshaping data

- Reshaping data is a common and important data wrangling task.
- Whether going from [wide to long format or long to wide](https://en.wikipedia.org/wiki/Wide_and_narrow_data), it can be a painful process.
  - But with a little practice, the ability to reshape data will become a powerful tool in your toolbox.

### Definitions

- While there are various definitions of tabular data structure, the two you will most often come across are **wide** and **long**.
  - Wide data are data structures in which all variable/values are columns.
    - At the extreme end, every _id_ will only have a single row:


| id | math_score_2019 | read_score_2019 | math_score_2020 | read_score_2020 |
|:--:|:---------------:|:---------------:|:---------------:|:---------------:|
| A  | 93              | 88              | 92              | 98              |
| B  | 99              | 92              | 97              | 95              |
| C  | 89              | 88              | 84              | 85              |

- Notice how each particular score (by year) has its own column?
  - Compare this to long data in which each _observational unit_ (id test score within a given year) will have a row:

| id | year | test | score |
|:--:|:----:|:----:|:-----:|
| A  | 2019 | math | 93    |
| A  | 2019 | read | 88    |
| A  | 2020 | math | 92    |
| A  | 2020 | read | 98    |
| B  | 2019 | math | 99    |
| B  | 2019 | read | 92    |
| B  | 2020 | math | 97    |
| B  | 2020 | read | 95    |
| C  | 2019 | math | 89    |
| C  | 2019 | read | 88    |
| C  | 2020 | math | 84    |
| C  | 2020 | read | 85    |

- The first wide and second long table present the same information in a different format. 
  - So why bother reshaping?
    - The short answer is that you sometimes need one format and sometimes the other due to the demands of the analysis you want to run, the figure you want to plot, or the table you want to make.

> Note: Data in the wild are often some combination of these two types: _wide-ish_ or _long-ish_. For an example, see our `all-schools.csv` data below, which is wide in some variables (test), but long in others (year). The point of defining long vs wide is not to have a testable definition, but rather to have a framework for thinking about how your data are structured and if that structure will work for your data analysis needs.

```{r, purl = TRUE, include = FALSE}
## -----------------------------------------------------------------------------
## Reshape data
## -----------------------------------------------------------------------------
```

### Example: wide --> long

To start, we'll go back to the `all_schools.csv` file.

```{r}
## ---------------------------
## input
## ---------------------------

## reading again just to be sure we have the original data
df <- read_csv(file.path("data", "sch-test", "all-schools.csv"))
```

- Notice how the data are wide in **test**:
  - Each school has one row per year, but each test gets its own column.
  - While this setup can be efficient for storage, it's not always the best for analysis or even just browsing.
    - What we want is for the data to be long.

- Instead of each test having its own column, we would like to make the data look like our long data example above, with each row representing a single _school_, _year_, _test_, _score_:

| school    | year | test | score                                                            |
|:----------|:----:|:-----|:----------------------------------------------------------------:|
| Bend Gate | 1980 | math | `r dplyr::filter(df, school == "Bend Gate", year == 1980) |> dplyr::pull(math)` |
| Bend Gate | 1980 | read | `r dplyr::filter(df, school == "Bend Gate", year == 1980) |> dplyr::pull(read)` |
| Bend Gate | 1980 | science | `r dplyr::filter(df, school == "Bend Gate", year == 1980) |> dplyr::pull(science)` |
| ... |...|...|...|


- As with joins, you can [reshape data frames using base R commands](https://stats.idre.ucla.edu/r/faq/how-can-i-reshape-my-data-in-r/).
- But again, we'll use tidyverse functions in the [tidyr](http://tidyr.tidyverse.org) library.
  - Specifically, we'll rely on the tidyr `pivot_longer()` and `pivot_wider()` commands.

#### `pivot_longer()`

The `pivot_longer()` function can take a number of arguments, but the
core things it needs to know are:

- `data`: the name of the data frame you're reshaping (we can use
  `|>` to pipe in the data name)
- `cols`: the names of the columns that you want to pivot into values
  of a single new column (thereby making the data frame "longer")
- `names_to`: the name of the new column that will contain the names
  of the `cols` you just listed
- `values_to`: the name of the column where the values in the `cols`
  you listed will go
  
- In our current situation, our `cols` to pivot are `"math"`, `"read"`, and
`"science"`.
  - Since they are test types, we'll call our `names_to` column `"test"` and our `values_to` column `"score"`.

```{r}
## ---------------------------
## process
## ---------------------------

## wide to long
df_long <- df |>
    ## cols: current test columns
    ## names_to: where "math", "read", and "science" will go
    ## values_to: where the values in cols will go
    pivot_longer(cols = c("math","read","science"),
                 names_to = "test",
                 values_to = "score")

## show
df_long
```

> #### Quick (ocular test) exercise
> How many rows did our initial data frame `df` have? How many unique
> tests did we have in each year? When reshaping from wide to long,
> how many rows should we expect our new data frame to have? Does our
> new data frame have that many rows?

### Example: long --> wide

#### `pivot_wider()`

- Now that we have our long data, let's reshape it back to wide format using `pivot_wider()`. In this case, we're doing just the opposite from before --- here are the main arguments you need to attend to:

- `data`: the name of the data frame you're reshaping (we can use
  `|>` to pipe in the data name)
- `names_from`: the name of the column that contains the values which
  will become new column names
- `values_from`: the name of the column that contains the values
  associated with the values in `names_from` column; these will go
  into the new columns.
  
```{r}
## ---------------------------
## process
## ---------------------------

## long to wide
df_wide <- df_long |>
    ## names_from: values in this column will become new column names
    ## values_from: values in this column will become values in new cols
    pivot_wider(names_from = "test",
                values_from = "score")

## show
df_wide
```

#### `pivot_()`-ing with separation

- Unfortunately, it's not always so clear cut to reshape data.
- In this second example, we'll again reshape from wide to long, but with an extra argument that helps when there's more than one piece of information in the variable name


First, we'll read in a second file `all_schools_wide.csv`
  - This file contains the same information as before, but in a _very_ wide format

```{r}
## ---------------------------
## input
## ---------------------------

## read in very wide test score data
df <- read_csv(file.path("data", "sch-test", "all-schools-wide.csv"))

## show
df
```

You see, each school has only one row and each test by year value gets its own column in the form `<test>_<year>`.


- We will use `pivot_longer()` just as we did before
  - But instead of one column for `names_to` we use our friend `c()` to list two columns we want the information from column name to go to
  - Then, we add `names_sep = "_"`, which means separate the information from the names at every underscore
    - I.e., this will put everything before the underscore in the first column `test` and everything after into the second column `year`

```{r}
## ---------------------------
## process
## ---------------------------

## wide to long
df_long <- df |>
    ## NB: contains() looks for "19" in name: if there, it adds it to cols
    pivot_longer(cols = contains("19"),
                 names_to = c("test", "year"),
                 names_sep = "_",
                 values_to = "score")

## show
df_long
```

> #### Quick exercise(s)
> 1. What do you think we'd need to change if the column name had 3 pieces of information all separated by an underscore?
> 2. What about if the information was separated by a `.` period?

- Now, if we want to get our data back in to extra long form, we can use a very similar argument in `pivot_wider()`
  - We just use `c()` to say get the name information from two columns
  - `names_sep = "_"` is identical to before, but this time it's saying to place and underscore as the separator

```{r}
## ---------------------------
## process
## ---------------------------

## wide to long
df_wide <- df_long |>
    pivot_wider(values_from = score,
                names_from = c(test, year),
                names_sep = "_")

## show
df_wide
```

## Final note

- Just as all data sets are unique, so too are the particular steps you may need to take to **append**, **join**, or **reshape** your data. 
  - Even experienced coders rarely get all the steps correct the first try.
  - Be prepared to spend time getting to know your data and figuring out, through trial and error, how to wrangle it so that it
meets your analytic needs.
  - Code books, institutional/domain knowledge, and patience are your friends here!

```{r, include = FALSE, purl = TRUE}
## -----------------------------------------------------------------------------
## end script
## -----------------------------------------------------------------------------
```

# Assignment

- Using the `hsls-small.csv` data set and the online codebook, answer
the following questions.
   - Throughout, you **should** account for missing values by dropping them.

## Questions

1. If you want a challenge, do this all in one chained pipe, otherwise save step i output then pipe steps ii-iv;
  i. Compute the average test score by region
  ii. Join back into the full data frame.
  iii. Compute the difference between each student's test score and that of the region.
  iv. Finally, show the mean of these differences by region

> Hint: if you think about it, this should probably be a very very small number...

2. Compute the average test score by region and family income level and join it back to the full data frame.

> Hint: You can join on more than one key using `c()`.

3. 
  i. Select the following variables from the full data set
    
    - `stu_id`
    - `x1stuedexpct`
    - `x1paredexpct`
    - `x4evratndclg`  
   
  ii. From this reduced data frame, reshape the data frame so that it is long in educational expectations
    - As in, each observation should have two rows, one for each educational expectation type
   
   _e.g. (your column names and values may be different)_
   
   | stu_id | expect\_type | expectation | x4evratndclg |
   |:------:|:------------:|:-----------:|:------------:|
   | 0001   | x1stuedexpct | 6           | 1            |
   | 0001   | x1paredexpct | 7           | 1            |
   | 0002   | x1stuedexpct | 5           | 1            |
   | 0002   | x1paredexpct | 5           | 1            |

Once complete, turn in the .R script (no data etc.) to Canvas by the due date (Sunday 11:59pm following the lesson). Assignments will be graded on the following Monday (time permitting) in line with the grading policy outlined in the syllabus.


:::
